          #Softmax pt.3
import numpy as np 
import nnfs
from nnfs.datasets import spiral_data
                                           #Going back to ch.5
nnfs.init()                


class Activate_Dense_Layer:
   def __init__(self, n_inputs, n_neurons):                   
      self.weights = 0.1 * np.random.randn(n_inputs, n_neurons)   
      self.biases = np.zeros((1, n_neurons))                      
   def forward(self, inputs):
      self.output = np.dot(inputs, self.weights) + self.biases

class Activate_ReLU:
   def forward(self, inputs):
      self.output = np.maximum(0, inputs)

 ##############################################################################################
                                               #Add softmax activation function            
class Activate_Softmax:                  
   def forward(self, inputs):
      exp_values = np.exp(inputs - np.max(exp_values, axis = 1, keepdims = True))    #Prevent overflow values
      probabilities= exp_values / np.sum(exp_values, axis = 1, keepdims = True)
      self.output = probabilities


Y, z = spiral_data(samples = 155, classes = 3)    #155 samples per class, 3 classes

Dense1 = Activate_Dense_Layer(2, 4)
activate1 = Activate_ReLU()

Dense2 = Activate_Dense_Layer(4, 8)
activate2 = Activate_Softmax()



